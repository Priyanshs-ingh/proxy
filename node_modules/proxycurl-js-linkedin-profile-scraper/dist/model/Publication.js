"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _PublicationPublishedOn = _interopRequireDefault(require("./PublicationPublishedOn"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
/**
 * The Publication model module.
 * @module model/Publication
 * @version 1.0.0
 */
var Publication = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>Publication</code>.
   * @alias module:model/Publication
   */
  function Publication() {
    _classCallCheck(this, Publication);
    Publication.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(Publication, null, [{
    key: "initialize",
    value: function initialize(obj) {}

    /**
     * Constructs a <code>Publication</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Publication} obj Optional instance to populate.
     * @return {module:model/Publication} The populated <code>Publication</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new Publication();
        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }
        if (data.hasOwnProperty('publisher')) {
          obj['publisher'] = _ApiClient["default"].convertToType(data['publisher'], 'String');
        }
        if (data.hasOwnProperty('published_on')) {
          obj['published_on'] = _PublicationPublishedOn["default"].constructFromObject(data['published_on']);
        }
        if (data.hasOwnProperty('description')) {
          obj['description'] = _ApiClient["default"].convertToType(data['description'], 'String');
        }
        if (data.hasOwnProperty('url')) {
          obj['url'] = _ApiClient["default"].convertToType(data['url'], 'String');
        }
      }
      return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Publication</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Publication</code>.
     */
  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // ensure the json data is a string
      if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
        throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
      }
      // ensure the json data is a string
      if (data['publisher'] && !(typeof data['publisher'] === 'string' || data['publisher'] instanceof String)) {
        throw new Error("Expected the field `publisher` to be a primitive type in the JSON string but got " + data['publisher']);
      }
      // validate the optional field `published_on`
      if (data['published_on']) {
        // data not null
        _PublicationPublishedOn["default"].validateJSON(data['published_on']);
      }
      // ensure the json data is a string
      if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
        throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
      }
      // ensure the json data is a string
      if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
        throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
      }
      return true;
    }
  }]);
  return Publication;
}();
/**
 * Name of the publication.
 * @member {String} name
 */
Publication.prototype['name'] = undefined;

/**
 * The publishing organisation body.
 * @member {String} publisher
 */
Publication.prototype['publisher'] = undefined;

/**
 * @member {module:model/PublicationPublishedOn} published_on
 */
Publication.prototype['published_on'] = undefined;

/**
 * Description of the publication.
 * @member {String} description
 */
Publication.prototype['description'] = undefined;

/**
 * URL of the publication.
 * @member {String} url
 */
Publication.prototype['url'] = undefined;
var _default = Publication;
exports["default"] = _default;
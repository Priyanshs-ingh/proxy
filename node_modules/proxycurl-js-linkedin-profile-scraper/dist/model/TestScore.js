"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _TestScoreDateOn = _interopRequireDefault(require("./TestScoreDateOn"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
/**
 * The TestScore model module.
 * @module model/TestScore
 * @version 1.0.0
 */
var TestScore = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>TestScore</code>.
   * @alias module:model/TestScore
   */
  function TestScore() {
    _classCallCheck(this, TestScore);
    TestScore.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(TestScore, null, [{
    key: "initialize",
    value: function initialize(obj) {}

    /**
     * Constructs a <code>TestScore</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestScore} obj Optional instance to populate.
     * @return {module:model/TestScore} The populated <code>TestScore</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new TestScore();
        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }
        if (data.hasOwnProperty('score')) {
          obj['score'] = _ApiClient["default"].convertToType(data['score'], 'String');
        }
        if (data.hasOwnProperty('date_on')) {
          obj['date_on'] = _TestScoreDateOn["default"].constructFromObject(data['date_on']);
        }
        if (data.hasOwnProperty('description')) {
          obj['description'] = _ApiClient["default"].convertToType(data['description'], 'String');
        }
      }
      return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestScore</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestScore</code>.
     */
  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // ensure the json data is a string
      if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
        throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
      }
      // ensure the json data is a string
      if (data['score'] && !(typeof data['score'] === 'string' || data['score'] instanceof String)) {
        throw new Error("Expected the field `score` to be a primitive type in the JSON string but got " + data['score']);
      }
      // validate the optional field `date_on`
      if (data['date_on']) {
        // data not null
        _TestScoreDateOn["default"].validateJSON(data['date_on']);
      }
      // ensure the json data is a string
      if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
        throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
      }
      return true;
    }
  }]);
  return TestScore;
}();
/**
 * Title of the course for which test score was derived from.
 * @member {String} name
 */
TestScore.prototype['name'] = undefined;

/**
 * Test score
 * @member {String} score
 */
TestScore.prototype['score'] = undefined;

/**
 * @member {module:model/TestScoreDateOn} date_on
 */
TestScore.prototype['date_on'] = undefined;

/**
 * Description of the test score.
 * @member {String} description
 */
TestScore.prototype['description'] = undefined;
var _default = TestScore;
exports["default"] = _default;
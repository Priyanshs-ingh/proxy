"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
/**
 * The CompanyLocation model module.
 * @module model/CompanyLocation
 * @version 1.0.0
 */
var CompanyLocation = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>CompanyLocation</code>.
   * @alias module:model/CompanyLocation
   */
  function CompanyLocation() {
    _classCallCheck(this, CompanyLocation);
    CompanyLocation.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(CompanyLocation, null, [{
    key: "initialize",
    value: function initialize(obj) {}

    /**
     * Constructs a <code>CompanyLocation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CompanyLocation} obj Optional instance to populate.
     * @return {module:model/CompanyLocation} The populated <code>CompanyLocation</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new CompanyLocation();
        if (data.hasOwnProperty('country')) {
          obj['country'] = _ApiClient["default"].convertToType(data['country'], 'String');
        }
        if (data.hasOwnProperty('city')) {
          obj['city'] = _ApiClient["default"].convertToType(data['city'], 'String');
        }
        if (data.hasOwnProperty('postal_code')) {
          obj['postal_code'] = _ApiClient["default"].convertToType(data['postal_code'], 'String');
        }
        if (data.hasOwnProperty('line_1')) {
          obj['line_1'] = _ApiClient["default"].convertToType(data['line_1'], 'String');
        }
        if (data.hasOwnProperty('is_hq')) {
          obj['is_hq'] = _ApiClient["default"].convertToType(data['is_hq'], 'Boolean');
        }
        if (data.hasOwnProperty('state')) {
          obj['state'] = _ApiClient["default"].convertToType(data['state'], 'String');
        }
      }
      return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CompanyLocation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CompanyLocation</code>.
     */
  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // ensure the json data is a string
      if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
        throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
      }
      // ensure the json data is a string
      if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
        throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
      }
      // ensure the json data is a string
      if (data['postal_code'] && !(typeof data['postal_code'] === 'string' || data['postal_code'] instanceof String)) {
        throw new Error("Expected the field `postal_code` to be a primitive type in the JSON string but got " + data['postal_code']);
      }
      // ensure the json data is a string
      if (data['line_1'] && !(typeof data['line_1'] === 'string' || data['line_1'] instanceof String)) {
        throw new Error("Expected the field `line_1` to be a primitive type in the JSON string but got " + data['line_1']);
      }
      // ensure the json data is a string
      if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
        throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
      }
      return true;
    }
  }]);
  return CompanyLocation;
}();
/**
 * @member {String} country
 */
CompanyLocation.prototype['country'] = undefined;

/**
 * @member {String} city
 */
CompanyLocation.prototype['city'] = undefined;

/**
 * @member {String} postal_code
 */
CompanyLocation.prototype['postal_code'] = undefined;

/**
 * @member {String} line_1
 */
CompanyLocation.prototype['line_1'] = undefined;

/**
 * @member {Boolean} is_hq
 */
CompanyLocation.prototype['is_hq'] = undefined;

/**
 * @member {String} state
 */
CompanyLocation.prototype['state'] = undefined;
var _default = CompanyLocation;
exports["default"] = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _EmployeeCount = _interopRequireDefault(require("../model/EmployeeCount"));
var _EmployeeList = _interopRequireDefault(require("../model/EmployeeList"));
var _LinkedinCompany = _interopRequireDefault(require("../model/LinkedinCompany"));
var _ProfilePicture = _interopRequireDefault(require("../model/ProfilePicture"));
var _UrlResult = _interopRequireDefault(require("../model/UrlResult2"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
/**
* CompanyAPI service.
* @module api/CompanyAPIApi
* @version 1.0.0
*/
var CompanyAPIApi = /*#__PURE__*/function () {
  /**
  * Constructs a new CompanyAPIApi. 
  * @alias module:api/CompanyAPIApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function CompanyAPIApi(apiClient) {
    _classCallCheck(this, CompanyAPIApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Callback function to receive the result of the companyLookupEndpoint operation.
   * @callback module:api/CompanyAPIApi~companyLookupEndpointCallback
   * @param {String} error Error message, if any.
   * @param {module:model/UrlResult2} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Cost: 2 credits / successful request. Resolve Company LinkedIn Profile from company name,     domain name and location.
   * @param {Object} opts Optional parameters
   * @param {String} opts.companyLocation      The location / region of company.     ISO 3166-1 alpha-2 codes     
   * @param {String} opts.companyDomain Company website or Company domain Requires either `company_domain` or `company_name`
   * @param {String} opts.companyName Company Name Requires either `company_domain` or `company_name`
   * @param {module:api/CompanyAPIApi~companyLookupEndpointCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/UrlResult2}
   */
  _createClass(CompanyAPIApi, [{
    key: "companyLookupEndpoint",
    value: function companyLookupEndpoint(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'company_location': opts['companyLocation'],
        'company_domain': opts['companyDomain'],
        'company_name': opts['companyName']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['BearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _UrlResult["default"];
      return this.apiClient.callApi('/api/linkedin/company/resolve', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the companyProfileEndpoint operation.
     * @callback module:api/CompanyAPIApi~companyProfileEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkedinCompany} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cost: 1 credit / successful request. Get structured data of a Company Profile
     * @param {String} url      URL of the LinkedIn Company Profile to crawl.      URL should be in the format of `https://www.linkedin.com/company/<public_identifier>`     
     * @param {Object} opts Optional parameters
     * @param {String} opts.resolveNumericId      Enable support for Company Profile URLs with numerical IDs that you most frequently fetch from Sales Navigator.      We achieve this by resolving numerical IDs into vanity IDs with cached company profiles from [LinkDB](https://nubela.co/proxycurl/linkdb).      For example, we will turn `https://www.linkedin.com/company/1234567890` to `https://www.linkedin.com/company/acme-corp` -- for which the API endpoint only supports the latter.          This parameter accepts the following values:     - `false` (default value) - Will not resolve numerical IDs.     - `true` - Enable support for Company Profile URLs with numerical IDs.      Costs an extra `2` credit on top of the base cost of the endpoint.     
     * @param {String} opts.categories      Appends categories data of this company.      Default value is `\"exclude\"`.     The other acceptable value is `\"include\"`, which will include these categories (if available) for `1` extra credit.     
     * @param {String} opts.fundingData      Returns a list of funding rounds that this company has received.      Default value is `\"exclude\"`.     The other acceptable value is `\"include\"`, which will include these categories (if available) for `1` extra credit.     
     * @param {String} opts.extra      Enriches the Company Profile with extra details from external sources. Details include Crunchbase ranking, contact email, phone number, Facebook account, Twitter account, funding rounds and amount, IPO status, investor information, etc.          Default value is `\"exclude\"`.     The other acceptable value is `\"include\"`, which will include these extra details (if available) for `1` extra credit.     
     * @param {String} opts.exitData      Returns a list of investment portfolio exits.      Default value is `\"exclude\"`.     The other acceptable value is `\"include\"`, which will include these categories (if available) for `1` extra credit.     
     * @param {String} opts.acquisitions      Provides further enriched data on acquisitions made by this company from external sources.      Default value is `\"exclude\"`.     The other acceptable value is `\"include\"`, which will include these acquisition data (if available) for `1` extra credit.     
     * @param {String} opts.useCache `if-present` The default behavior. Fetches profile from cache regardless of age of profile. If profile is not available in cache, API will attempt to source profile externally.  `if-recent` API will make a best effort to return a fresh profile no older than 29 days.Costs an extra `1` credit on top of the cost of the base endpoint.
     * @param {module:api/CompanyAPIApi~companyProfileEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkedinCompany}
     */
  }, {
    key: "companyProfileEndpoint",
    value: function companyProfileEndpoint(url, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling companyProfileEndpoint");
      }
      var pathParams = {};
      var queryParams = {
        'resolve_numeric_id': opts['resolveNumericId'],
        'categories': opts['categories'],
        'funding_data': opts['fundingData'],
        'extra': opts['extra'],
        'exit_data': opts['exitData'],
        'acquisitions': opts['acquisitions'],
        'url': url,
        'use_cache': opts['useCache']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['BearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _LinkedinCompany["default"];
      return this.apiClient.callApi('/api/linkedin/company', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the companyProfilePictureEndpoint operation.
     * @callback module:api/CompanyAPIApi~companyProfilePictureEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfilePicture} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cost: 0 credit / successful request. Get the profile picture of a company.  Profile pictures are served from cached company profiles found within [LinkDB](https://nubela.co/proxycurl/linkdb). If the profile does not exist within [LinkDB](https://nubela.co/proxycurl/linkdb), then the API will return a `404` status code.
     * @param {String} linkedinCompanyProfileUrl      LinkedIn Profile URL of the company that you are trying to get the profile picture of.     
     * @param {module:api/CompanyAPIApi~companyProfilePictureEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfilePicture}
     */
  }, {
    key: "companyProfilePictureEndpoint",
    value: function companyProfilePictureEndpoint(linkedinCompanyProfileUrl, callback) {
      var postBody = null;
      // verify the required parameter 'linkedinCompanyProfileUrl' is set
      if (linkedinCompanyProfileUrl === undefined || linkedinCompanyProfileUrl === null) {
        throw new Error("Missing the required parameter 'linkedinCompanyProfileUrl' when calling companyProfilePictureEndpoint");
      }
      var pathParams = {};
      var queryParams = {
        'linkedin_company_profile_url': linkedinCompanyProfileUrl
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['BearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ProfilePicture["default"];
      return this.apiClient.callApi('/api/linkedin/company/profile-picture', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the employeeCountEndpoint operation.
     * @callback module:api/CompanyAPIApi~employeeCountEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmployeeCount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cost: 1 credit / successful request. Get a number of total employees of a Company.  Get an employee count of this company from various sources.
     * @param {String} url      URL of the LinkedIn Company Profile to target.      URL should be in the format of `https://www.linkedin.com/company/<public_identifier>`     
     * @param {Object} opts Optional parameters
     * @param {String} opts.linkedinEmployeeCount      Option to include a scraped employee count value from the target company's LinkedIn profile.      Valid values are `include` and `exclude`:      * `exclude` (default) : To exclude the scraped employee count.     * `include` : To include the scraped employee count.      Costs an extra `1` credit on top of the base cost of the endpoint.     
     * @param {String} opts.employmentStatus      Parameter to tell the API to filter past or current employees.      Valid values are `current`, `past`, and `all`:      * `current` (default) : count current employees     * `past` : count past employees     * `all` : count current & past employees     
     * @param {module:api/CompanyAPIApi~employeeCountEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmployeeCount}
     */
  }, {
    key: "employeeCountEndpoint",
    value: function employeeCountEndpoint(url, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling employeeCountEndpoint");
      }
      var pathParams = {};
      var queryParams = {
        'linkedin_employee_count': opts['linkedinEmployeeCount'],
        'employment_status': opts['employmentStatus'],
        'url': url
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['BearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _EmployeeCount["default"];
      return this.apiClient.callApi('/api/linkedin/company/employees/count/', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the employeeListingEndpoint operation.
     * @callback module:api/CompanyAPIApi~employeeListingEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmployeeList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cost: 3 credits / employee returned. Get a list of employees of a Company.  This API endpoint is limited by LinkDB which is populated with profiles in the US, UK, Canada, Israel, Australia, Ireland, New Zealand and Singapore. As such, this endpoint is best used to list employees working in companies based in those locations only.
     * @param {String} url      URL of the LinkedIn Company Profile to target.      URL should be in the format of `https://www.linkedin.com/company/<public_identifier>`     
     * @param {Object} opts Optional parameters
     * @param {String} opts.enrichProfiles      Get the full profile of employees instead of only their profile urls.      Each request respond with a streaming response of profiles.      The valid values are:          * `skip` (default): lists employee's profile url     * `enrich`: lists full profile of employees      Calling this API endpoint with this parameter would add `1` credit per employee returned.     
     * @param {String} opts.roleSearch      Filter employees by their title by matching the employee's title against a *regular expression*.      The default value of this parameter is `null`.      The accepted value is a *regular expression* (regex).      (The base cost of calling this API endpoint with this parameter would be `10` credits.     Each employee matched and returned would cost `6` credits per employee returned.)     
     * @param {String} opts.pageSize      Tune the maximum results returned per API call.      The default value of this parameter is `200000`.      Accepted values for this parameter is an integer ranging from `1` to `200000`.      When `enrich_profiles=enrich`, this parameter accepts value ranging from `1` to `100`.     
     * @param {String} opts.employmentStatus      Parameter to tell the API to return past or current employees.      Valid values are `current`, `past`, and `all`:      * `current` (default) : lists current employees     * `past` : lists past employees     * `all` : lists current & past employees     
     * @param {String} opts.resolveNumericId      Enable support for Company Profile URLs with numerical IDs that you most frequently fetch from Sales Navigator.      We achieve this by resolving numerical IDs into vanity IDs with cached company profiles from [LinkDB](https://nubela.co/proxycurl/linkdb).      For example, we will turn `https://www.linkedin.com/company/1234567890` to `https://www.linkedin.com/company/acme-corp` -- for which the API endpoint only supports the latter.          This parameter accepts the following values:     - `false` (default value) - Will not resolve numerical IDs.     - `true` - Enable support for Company Profile URLs with numerical IDs.      Costs an extra `2` credit on top of the base cost of the endpoint.     
     * @param {module:api/CompanyAPIApi~employeeListingEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmployeeList}
     */
  }, {
    key: "employeeListingEndpoint",
    value: function employeeListingEndpoint(url, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling employeeListingEndpoint");
      }
      var pathParams = {};
      var queryParams = {
        'enrich_profiles': opts['enrichProfiles'],
        'role_search': opts['roleSearch'],
        'page_size': opts['pageSize'],
        'employment_status': opts['employmentStatus'],
        'resolve_numeric_id': opts['resolveNumericId'],
        'url': url
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['BearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _EmployeeList["default"];
      return this.apiClient.callApi('/api/linkedin/company/employees/', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the employeeSearchAPIEndpoint operation.
     * @callback module:api/CompanyAPIApi~employeeSearchAPIEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmployeeList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cost: 10 credits / successful request. Search employees of a target by their job title.
     * @param {String} linkedinCompanyProfileUrl      LinkedIn Profile URL of the target company.     
     * @param {String} keywordRegex      Job title keyword to search for in regular expression format.     
     * @param {Object} opts Optional parameters
     * @param {String} opts.pageSize      Tune the maximum results returned per API call.     The default value of this parameter is `200000`.     Accepted values for this parameter is an integer ranging from `1` to `200000`.     
     * @param {module:api/CompanyAPIApi~employeeSearchAPIEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmployeeList}
     */
  }, {
    key: "employeeSearchAPIEndpoint",
    value: function employeeSearchAPIEndpoint(linkedinCompanyProfileUrl, keywordRegex, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'linkedinCompanyProfileUrl' is set
      if (linkedinCompanyProfileUrl === undefined || linkedinCompanyProfileUrl === null) {
        throw new Error("Missing the required parameter 'linkedinCompanyProfileUrl' when calling employeeSearchAPIEndpoint");
      }
      // verify the required parameter 'keywordRegex' is set
      if (keywordRegex === undefined || keywordRegex === null) {
        throw new Error("Missing the required parameter 'keywordRegex' when calling employeeSearchAPIEndpoint");
      }
      var pathParams = {};
      var queryParams = {
        'page_size': opts['pageSize'],
        'linkedin_company_profile_url': linkedinCompanyProfileUrl,
        'keyword_regex': keywordRegex
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['BearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _EmployeeList["default"];
      return this.apiClient.callApi('/api/linkedin/company/employee/search/', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);
  return CompanyAPIApi;
}();
exports["default"] = CompanyAPIApi;